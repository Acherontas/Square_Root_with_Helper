# Square_Root_with_Helper
Find the square root with a helper root number. A small one
I will not offer any code.
So far there are a couple of ways to determine the result of a square root for
a specific number 
some of them are in link 
https://www.netlib.org/fdlibm/e_sqrt.c
here i will paste a way which u can achive the result by using the help of 
small square root result number 
i Will not upload the source code or the executable itself.
Just the Output of the process.

//Code Begin
voyeristic behaviours have fun xD
thelame hack pirame hack perimenoume lefta  vrika tin tetragoniki riza apla tin meiono stis protes rizes xD
enter modeset if modeset is 0 the default values will be applied in order to find the result pwr or press 1
if modeset is 2 to do the tradition square calculation
if modeset is 3 to do the tradition diairesi calculation
if modeset 1 enter a number oxi ton zitoumeno gia euresi 
gia sxolia pata 0 i 1
gia apotelesma per y diairesis pata 5
mporeis na mperdeuteis ama theleis vazontas tis fores den in kako xD 
i mi mperdemeni timi einai pantote 1 alla grafe to 

enter ur number : 
325577896723214
using y=x/mdst 4.96232e+10 = 3.25578e+14 / 6561
passing values @ k_of_times function 3.25578e+14 and 4.96232e+10
passing also values 4.96232e+10 with 0
 | current state of y 49623212425.425087639 of k 0 dotxl 0 of dotko 0
 | breaking up the y 49623212425.425087639 = 49623212425 + 0.42508763907940862673
from y0 49623212425.425087639 --> new y0 7563361.1378486644778 from 49623212425 / 6561 
 | current state of y 7563361.1378486644778 of k 0 dotxl 0 of dotko 0
 | breaking up the y 7563361.1378486644778 = 7563361 + 0.13784866447783560564
from y0 7563361.1378486644778 --> new y0 1152.7756649670270504 from 7563361 / 6561 
 | current state of y 1152.7756649670270504 of k 0 dotxl 0 of dotko 0
 | breaking up the y 1152.7756649670270504 = 1152 + 0.77566496702705042457
from y0 1152.7756649670270504 --> new y0 0.17570121398674394916 from 1152 / 6561 
 | current state of y 0.17570121398674394916 of k 0 dotxl 0 of dotko 0
 | breaking up the y 0.17570121398674394916 = 0 + 0.17570121398674394916
 | calculating small square of y 0.17570121398674394916

  ------> returning @0 with values: 
  ------------> y 0.17570121398674394916
  ------------> sqrtl of k 0.41916728639857374867 of above y 
  ------------> dotxl as xl  81
  ------------> result= 0.41916728639857374867 * 81 = 33.952550198284473642
  //------> result of sqrtl  0.41916728639857374867 of number y 0.17570121398674394916 ==:: 33.952550198284473642 //

passing @ pwr function 33.952550198284473642
mrkr 33.952550198284473642 dotxl 0
need @ ext 4 times with mode 0 and xty 0
need @ ext 4 times
 --------------> @i xl 1 default * value of 6561
 --------------> @i xl 2 default * value of 531441
 --------------> @i xl 3 default * value of 43046721
kres with xl 531441 18043777.229926498957
final xl 531441
as of 33.952550198284473642 * 531441 = 18043777.229926498957
MAIN times 33.952550198284473642 and 18043777.229926498957
Limitation exists on the length of the number the user gives
//Code Ends
